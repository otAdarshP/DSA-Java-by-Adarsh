Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas.
The guards have gone and will come back in h hours. Koko can decide her bananas-per-hour eating speed
of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile.
If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas
during this hour.nKoko likes to eat slowly but still wants to finish eating all the bananas before
the guards return. Return the minimum integer k such that she can eat all the bananas within h hours.

1. Optimal solution:


public int minEatingSpeed (int [] piles, int h){
    int minBananas = 1;
    int maxBananas = 0;
    for (int pile: piles){
        maxBananas = Math.max(maxBananas, pile);
    }

    while (minBananas < maxBananas){
        int eatableBananas = minBananas + (maxBananas - minBananas) / 2;

        if (canEatBananas(piles, h, eatableBananas)){
            maxBananas = eatableBananas;
        }
        else {
            minBananas = eatableBananas + 1;
        }
    }
    return minBananas;
}

public boolean canEatBananas (int[] piles, int h, int target){
    int hoursTaken =  0;

    for (int pile : piles){
        hoursTaken = hoursTaken + (int)Math.ceil((double)pile / target);
    }
    return hoursTaken <= h;
}