A phrase is a palindrome if, after converting all uppercase letters into lowercase letters
and removing all non-alphanumeric characters, it reads the same forward and backward.
Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.

1. Brute Force - TC: O(n) here we are iterating and reversing the string.

public boolean isPalindrome(String s){
    StringBuilder AlphaNum = new StringBuilder();
    for (char ch : s.toCharArray()){
        if (Character.isLetterOrDigit(ch)){
            AlphaNum.append(Character.toLowerCase(ch));
        }
    }

    String cleanedString = AlphaNum.toString();
    String reversed = AlphaNum.reverse().toString();

    return cleanedString.equals(reversed);
}

2. Two-Pointer with a new string. TC: O(n) - Iterate once and compare

public boolean isPalindrome(String s){
    StringBuilder AlphaNum = new StringBuilder();

    for (char ch : s.toCharArray()){
        if (Character.isLetterOrDigit (ch)){
            AlphaNum.append (Character.toLowerCase(ch));
        }
    }

    String cleaned = AlphaNum.toString();
    int left = 0;
    int right = cleaned.length() - 1;

    while (left < right){
        if (cleaned.charAt(left) != cleaned.charAt(right)){
            return false;
        }
        left++;
        right--;
    }
    return true;
}

3. Two-Pointer on the original string. TC: O(n). Single pass

public boolean isPalindrome(String s){

    int left = 0;
    int right = s.length() - 1;

    while (left < right){
        while (left < right && !Character.isLetterOrDigit(s.charAt(left)){ // ignore these
            left++;
        }
        while (left < right && !Character.isLetterOrDigit(s.charAt(right)){ // ignore these
            right--;
        }
        while (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))){
            return false;
        }
        left++;
        right--;
    }
    return true;
}

4. Regex + Two-Pointer on original string. TC: O(N)

public boolean isPalindrome(String s){
    int left = 0;
    int right = s.length() - 1;

    s = s.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();

    while (left < right){
        if (s.charAt(left) != s.charAt(right)){
            return false;
        }
        left++;
        right--;
    }
    return true;
}
 